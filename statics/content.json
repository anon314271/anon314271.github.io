[{"title":"How this Site is Built","content":"How the site is built\n===\n\nThis site is built using the [Quasar Framework](https://quasar-framework.org/) and deployed as a single page application\n\n## Pages \n\nPages such as this one are written in markdown. They are then automatically bundled together with a small script, doing so keeps everything static and means no database is needed to fetch content. It also provides a simple mechanism to update site content.\n\nThe following script is used bundle the markdown files and add them to the static files directory.\n\n```\nconst fs = require(\"fs\")\nconst path = require(\"path\")\n\nconst markdown_dir = \"./markdown\"\n\nconst markdown_files = fs.readdirSync(markdown_dir)\nconst index = []\nconst articles = []\nlet filePath\n\nmarkdown_files.forEach( (file, i) => {\n\tfilePath = path.join(__dirname, markdown_dir, file); \n\tlet content =\tfs.readFileSync(filePath, {encoding: 'utf-8'})\n\tfile = file.replace(/\\.[^/.]+$/, \"\")\n\t// add articles to index\n\tindex.push({\n\t\ttitle: file,\n\t\tid: i\n\t})\n\n\t// add content \n\tarticles.push({\n\t\ttitle: file,\n\t\tcontent: content\n\t})\n\n\n})\n\nfs.writeFileSync('./src/statics/index.json', JSON.stringify(index))\nfs.writeFileSync('./src/statics/content.json', JSON.stringify(articles))\n```\n\n\n"},{"title":"Welcome","content":"Hello World!\n===\n\nWelcome to my github io page! \n\nTo do:\n\n - [x] Image formatting \n - [x] Contents menu\n - [ ] Icons\n - [ ] About page / contact information\n - [ ] Projects page\n - [ ] Add content based on date \n\n\n"},{"title":"Basics of WebRTC","content":"\nWebRTC basics\n===\n\nWebRTC allows for communication be it text, video or audio between peers and without the need for complex server infrastructure.\n\nWebRTC is natively available in:\n - Modern Browsers\n - Android\n - iOS\n\n ## How WebRTC began\n\nGoogle bought GIPS which had developed components of RTC. They then open sourced the codecs and techniques developed by the company. Google engaged with industry standards setters to ensure consensus and began the implementation in 2011.\n\n\n## Main APIs\n\nThere are three main APIs involved with WebRTC: \n[MediaDevices]( https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n[RTCPeerConnection](https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection)\n[RTCDataChannel](https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel)\n\n\n###  MediaDevices.getUserMedia()\n Prompts the user for access to their media streams (video and audio) and produces a MediaStream containing the requested media.\n\n\n#### MediaStream\n\nRepresents a synchronised media stream. i.e. Video and audio\n\n### RTCPeerConnection \n\nA class used to represent a WebRTC connection between a local computer and peer\n\n\n### RTCDataChannel\n\nAssociated with a given RTCPeerConnection instance. Represents a network channel used for p2p data transfer\n\n\n"}]